#include<bits/stdc++.h>
using namespace std;
void make_sieve(vector<int> & precomputations,int n){
    precomputations[0]=0;
    precomputations[1]=0;
    for(int i=2;i*i<=n;i++){
        if(precomputations[i]==1){
            for(int j=i*i;j<=n;j+=i){
                precomputations[j]=0;
            }
        }
    }
}
int main(){
    int t;
    cin>>t;
    int n=1e6; // becauser maximum range of r is 1e12 so we always need n to be sqrt(1e12) i.e. 1e6 because if n is given and n is very large 
              // then we only want the prime numbers from 2 to sqrt(n) that will mark the all the rest numbers from sqrt(n)+1 to n as non prime.
    vector<int> precomputations(n+1,1);
    make_sieve(precomputations,n);
    
    while(t--){
        int l,r;
        cin>>l>>r;
        vector<int> prime;
        n=sqrt(r);
        for(int i=2;i<=n;i++){
        if(precomputations[i]==1){
            prime.push_back(i);
        }
    }
    int a[r-l+1];
    for(int i=0;i<r-l+1;i++){
        a[i]=1;
    }
    for(auto pr:prime){
       int firstmultiple=(l/pr)*pr;
       if(firstmultiple<l){
           firstmultiple+=pr;
       }
       firstmultiple=max(firstmultiple,pr*pr);
       for(int i=firstmultiple;i<=r;i+=pr){
          a[i-l]=0; 
       }
       
    }

    // step to get all the primes

    for(int i=l;i<=r;i++){
        if(a[i-l]==1){
            cout<<i<<" ";
        }
    }
    cout<<endl;
    }
}
